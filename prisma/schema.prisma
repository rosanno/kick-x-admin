// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  photo_url String?
  email     String  @unique
  password  String
  role      Role    @default(USER)
}

model Customer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  birthday    String
  address     String
  gender      String
  phoneNumber String
  password    String
  order       Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Gender {
  Both
  Male
  Female
}

model Category {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  category_name String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]
}

model Brand {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  brand_name String
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Stock {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  stock Int
}

model Size {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  size      Float
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  slug        String
  brandId     String      @db.ObjectId
  brand       Brand       @relation(fields: [brandId], references: [id])
  categoryId  String      @db.ObjectId
  category    Category    @relation(fields: [categoryId], references: [id])
  color       Color       @relation(fields: [colorId], references: [id])
  gender      Gender      @default(Both)
  sizes       Size[]
  images      Image[]
  stocks      Int
  price       Float
  discount    Float?
  isFeatured  Boolean?    @default(false)
  orderItems  OrderItem[]
  colorId     String      @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String
  orderItems OrderItem[]
  amount     Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId String      @db.ObjectId
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model Color {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  color_value String
  color_name  String
  product     Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Image {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  image_path String
  product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String?  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
